name: ci

on:
  # deployment:
  # page_build:
  schedule:
    # https://crontab.guru/#0_1_*_*_*
    - cron: '0 1 * * *'
  push:
    branches: [main]
    tags: [main]
  pull_request:
  workflow_dispatch:

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  GITHUB_REGISTRY: ghcr.io
  SQLX_OFFLINE: true

jobs:
  ##################################################
  # Build & Test Stage                           ###
  ##################################################
  prettier:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npx prettier --check .

  eslint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npx eslint .

  tsc:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npx --workspaces tsc -b

  vitest:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npx --workspaces tsc -b
      - run: npm test

  fmt_check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - run: npm run fmt

  udeps:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0 libayatana-appindicator3-dev protobuf-compiler
          rustup set auto-self-update disable
          rustup default nightly
          mkdir dist
      - uses: taiki-e/install-action@cargo-udeps
      - run: cargo udeps
      - run: cargo udeps --all-features

  clippy_check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0 libayatana-appindicator3-dev protobuf-compiler
          rustup set auto-self-update disable
          rustup toolchain install stable --profile minimal --component clippy
          mkdir dist
      - run: npm run clippy

  test_rust:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: spaced
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0 libayatana-appindicator3-dev protobuf-compiler
          rustup set auto-self-update disable
          rustup toolchain install stable --profile minimal --component clippy
          mkdir dist
      - run: cargo test
        env:
          DATABASE_URL: postgres://admin:password@localhost:5432/spaced
          SQLX_OFFLINE: true

  ##################################################
  # Publish Stage                                ###
  ##################################################
  build_docker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/bake-action@v5
        env:
          REGISTRY: ${{ env.GITHUB_REGISTRY }}
          COMMIT_SHA: ${{ github.sha }}
        with:
          files: config/docker/compose-prod.yaml
          push: true
          load: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  ##################################################
  # Deploy Stage                                 ###
  ##################################################
  review:
    runs-on: ubuntu-latest
    needs: build_docker
    timeout-minutes: 20
    environment:
      name: review
      url: https://review.spaced.fun
    if: ${{ github.ref_type == 'branch' && github.ref_name != 'main' }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          PR_NUMBER=$(git name-rev HEAD --name-only | cut -d'/' -f3)
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          SUBDOMAIN=$PR_NUMBER.review
          echo "SUBDOMAIN=$SUBDOMAIN" >> .env
      - run: echo "COMMIT_SHA=${{ github.sha }}" >> .env
      - run: echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> .env
      - run: echo "STACK_NAME=review-${{ env.PR_NUMBER }}" >> .env
      - uses: cssnr/stack-deploy-action@v1
        with:
          name: review-${{ env.PR_NUMBER }}
          file: config/docker/services-stack.yaml
          host: review.spaced.fun
          user: spaced
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          env_file: .env

  provision_review:
    runs-on: ubuntu-latest
    needs: review
    timeout-minutes: 20
    environment:
      name: review
      url: https://review.spaced.fun
    if: ${{ github.ref_type == 'branch' && github.ref_name != 'main' }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          PR_NUMBER=$(git name-rev HEAD --name-only | cut -d'/' -f3)
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          SUBDOMAIN=$PR_NUMBER.review
          echo "SUBDOMAIN=$SUBDOMAIN" >> .env
      - run: echo "COMMIT_SHA=${{ github.sha }}" >> .env
      - run: echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> .env
      - uses: cssnr/stack-deploy-action@v1
        with:
          name: root
          file: config/docker/root-stack.yaml
          host: review.spaced.fun
          user: spaced
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          env_file: .env

  staging:
    runs-on: ubuntu-latest
    needs: build_docker
    timeout-minutes: 20
    environment:
      name: staging
      url: https://staging.spaced.fun
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
      - run: echo "COMMIT_SHA=${{ github.sha }}" >> .env
      - run: echo "DNS_ENV_NAME=IONOS_API_KEY" >> .env
      - uses: cssnr/stack-deploy-action@v1
        with:
          name: staging
          file: config/docker/stack-traefik.yaml
          host: staging.spaced.fun
          user: spaced
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          env_file: .env

  # performance:
  #   runs-on: ubuntu-latest
  #   needs: build_docker
  #   timeout-minutes: 20
  #   concurrency:
  #     group: ${{ github.subdomain }}
  #   strategy:
  #     matrix:
  #       subdomain: [aws, do, gc, hetzner, ionos]
  #   environment:
  #     name: review
  #     url: https://review.spaced.fun
  #   if: ${{ github.type == branch && github.ref_name != main }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: cssnr/stack-deploy-action@v1
  #       with:
  #         file: config/docker/docker-stack.yaml
  #         host: ${{ github.subdomain }}.spaced.fun
  #         user: spaced
  #         ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         env_file: ./envfile

  # production:
  #   runs-on: ubuntu-latest
  #   needs: build_docker
  #   timeout-minutes: 20
  #   concurrency: production
  #   environment:
  #     name: production
  #     url: https://spaced.fun
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         echo "GIT_COMMIT_HASH=${{ github.sha }}" >> ./envfile
  #     - uses: cssnr/stack-deploy-action@v1
  #       with:
  #         file: docker-stack.yaml
  #         host: ...
  #         user: deploy
  #         ssh_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
  #         env_file: ./envfile

  # ##################################################
  # # End-To-End Test Stage                        ###
  # ##################################################
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ needs.review.result == 'success' || needs.staging.result == 'success' }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npx playwright install --with-deps
      - run: npm run e2e
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: srcs/e2e/playwright-report/
          retention-days: 30

  # ##################################################
  # # Performance Stage                            ###
  # ##################################################
  # lighthouse:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   needs: build_docker
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - run: npx @lhci/cli@0.14
  #     - run: lhci autorun --config config/lighthouserc.cjs
  #       env:
  #         LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  #         LHCI_GITHUB_APP_TOKEN:

  # # load_test:
  # #   runs-on: self-hosted
  # #   needs: build_docker
  # #   timeout-minutes: 20
  # #   concurrency:
  # #     group: ${{ github.subdomain }}
  # #   strategy:
  # #     matrix:
  # #       subdomain: [aws, do, gc, hetzner, ionos]
  # #   steps:
  # #     - uses: actions/checkout@v4
  # #     - uses: artilleryio/action-cli@v1
  # #       with:
  # #         command: run config/load/socket-io.yml ${{ github.subdomain }}.spaced.fun
  # #     # - run: ssh spaced@${{ github.subdomain }}.spaced.fun

  # ##################################################
  # # Cleanup Stage                                ###
  # ##################################################
  # cleanup:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   if: github.event_name == pull_request && github.event.action == closed
  #   steps:
  #     - uses: actions/checkout@v4
