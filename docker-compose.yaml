x-vars:
  # Available tags: latest, nonroot, debug, debug-nonroot
  # For more, see https://github.com/GoogleContainerTools/distroless#how-do-i-use-distroless-images
  - &distroless-tag DISTROLESS_TAG=${DISTROLESS_TAG:-nonroot}
  - &docker-sock --docker=unix:///var/run/user/${UID:-1000}/docker.sock
  - &podman-sock --podman=unix:///var/run/user/${UID:-1000}/podman/podman.sock

services:
  # A persistent database for local development
  postgres-dev:
    image: postgres:17
    container_name: postgres
    profiles: [test]
    restart: always
    environment:
      POSTGRES_DB: spaced
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports: [5432:5432]
  rabbitmq:
    image: rabbitmq
    container_name: rabbitmq
    profiles: [test]
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - 5672:5672
      - 15672:15672
  # Reverse-proxy for Spaced services
  traefik:
    image: traefik:v3.2
    labels:
      - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
      - traefik.http.services.dashboard.loadbalancer.server.port=8080
    container_name: traefik
    profiles: [services]
    restart: always
    volumes:
      - /var/run/user/${UID:-1000}/docker.sock:/var/run/docker.sock
    command:
      - --api.insecure=true
      - --metrics.prometheus=true
      - --providers.docker
    ports:
      - 7777:80
  # Static file server
  nginx:
    image: nginx:alpine
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.rule=Host(`localhost`)
    container_name: nginx
    profiles: [services]
    restart: always
    volumes:
      - ./config/nginx/static.conf:/etc/nginx/nginx.conf
      - ./dist:/usr/share/nginx/html
  # Spaced services
  item_socket:
    image: spaced/item_socket:${IMAGE_TAG:-latest}
    labels:
      - traefik.enable=true
      - traefik.http.routers.item_socket.rule=PathPrefix(`/socket.io`)
      - traefik.http.services.item_socket.loadBalancer.sticky.cookie.name=server_id
      - traefik.http.services.item_socket.loadBalancer.sticky.cookie.httpOnly=true
    container_name: item_socket
    profiles: [e2e, services]
    restart: always
    environment:
      - HOST=0.0.0.0
    build:
      dockerfile: srcs/services/item_socket/Dockerfile
      args: [*distroless-tag]
    ports: [8081:8081]
  # item_producer:
  #   image: spaced/item_producer:${IMAGE_TAG:-latest}
  #   restart: always
  #   profiles: [services]
  #   depends_on: [postgres-dev, rabbitmq]
  #   environment:
  #     - DATABASE_HOST=postgres://admin:password@postgres-dev/spaced
  #     - AMQP_HOST=rabbitmq
  #     - HOST=0.0.0.0
  #   build:
  #     dockerfile: srcs/services/item_producer/Dockerfile
  #     args: [*x-distroless-tag]
  #   ports: [8080:8080]
  # user_service:
  # image: spaced/user_service:${IMAGE_TAG:-latest}
  # restart: always
  # profiles: [services]
  # depends_on: [postgres-dev]
  # environment:
  #   - DATABASE_HOST=postgres://admin:password@postgres-dev/spaced
  #   - HOST=0.0.0.0
  #   - JWT_SECRET=test
  # build:
  #   dockerfile: srcs/services/user_service/Dockerfile
  #   args: [*x-distroless-tag]
  # ports: [8081:8081]
  # Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    profiles: [services]
    restart: always
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro # Required for Podman subcontainers
      # - /var/lib/docker/:/var/lib/docker:ro # Docker Root
      - ~/.local/share/docker/:/var/lib/docker:ro # Docker Rootless
      # - /var/lib/containers:/var/lib/containers:ro # Podman Root
      - ~/.local/share/containers:/var/lib/containers:ro # Podman Rootless
      - /dev/disk/:/dev/disk:ro
    command:
      - *docker-sock
      - *podman-sock
      - --docker_only=true
    ports:
      - 8080:8080
    depends_on:
      - item_socket
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    profiles: [services]
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
