@startuml spaced_containers
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_WITH_LEGEND()
Person(user, "Student / Expert / Life-long learner")
Person(admin, "System Admin")
System_Boundary(boundry, "Spaced"){
  ' CLIENTS
  Container(desktop_client, "Desktop client", "Tauri + SolidJS + Typescript", "Provides the user's the functionality to interact with their items, settings and spaces in a desktop app.")
  Container(browser_client, "Browser client", "SolidJS + Typescript", "Provides the user's the functionality to interact with their items, settings and spaces via their web browser.")
  ' DASHBOARDS
  Container(traefik_dashboard, "Traefik dashboard", "Builtin Traefik", "Provides Service, Routing and Middleware discoverability insights.")
  Container(prometheus_dashboard, "Prometheus dashboard", "Builtin Prometheus", "Provides service and system metrics.")
  ' REVERSE PROXY
  Container(static_file_server, "Static File Server", "Nginx", "Returns the Spaced frontend in case an external CDN isn't configured.")
  Container(reverse_proxy, "Reverse proxy & Load-balancer", "Traefik", "Load balancing & Request routing.")
  Container(message_broker, "Message broker", "RabbitMQ", "Receives messages and queues them up for consumer services to process further")
  ' WEBSOCKET SERVERS
  Container(item_socket_1, "Item Socket 1", "WebSocket + Socket.IO", "Manages live interactions with items and spaces between multiple clients.")
  Container(item_socket_2, "Item Socket 2", "WebSocket + Socket.IO", "Manages live interactions with items and spaces between multiple clients.")
  ' METRICS
  Container(prometheus, "Prometheus", "Prometheus", "Aggregates metrics from Item Sockets, Traefik and cAdvisor.")
  Container(cadvisor, "cAdvisor", "cAdvisor", "Collects container metrics from Docker socket and provides out-of-memory protection.")
  ' DATABASE
  ContainerDb(postgres, "Database", "PostgreSQL (+ PostGIS)", "To store at least some item data or atleast item metadata and user settings.")2
}
' USER > CLIENTS
Rel_D(user, browser_client, "Manages their items in Spaced via the browser.")
Rel_D(user, desktop_client, "Manages their items in Spaced via the desktop app.")
' ADMIN > OBSERVABILITY DASHBOARDS
Rel_D(admin, traefik_dashboard, "Manages service discovery")
Rel_D(admin, prometheus_dashboard, "Uses alerting on container and system metrics")
' CLIENT > REVERSE PROXY
Rel_D(desktop_client, reverse_proxy, "Request", "HTTPS/WSS")
Rel_D(browser_client, reverse_proxy, "Request", "HTTPS/WSS")
' OBSERVABILITY DASHBOARDS > SERVICES
Rel_D(traefik_dashboard, reverse_proxy, "Request", "HTTPS/WSS")
Rel_D(prometheus_dashboard, prometheus, "Request", "HTTPS/WSS")
' REVERSE PROXY > SPACED SERVICES
Rel_D(reverse_proxy, item_socket_1, "Realtime bi-directional communication", "HTTPS/WSS")
Rel_D(reverse_proxy, item_socket_2, "")
Rel_L(reverse_proxy, static_file_server, "Request", "HTTPS")
' Rel_L(reverse_proxy, message_broker, "Messaging", "TCP")
Rel_L(item_socket_2, message_broker, "Messaging", "TCP")
Rel_R(item_socket_1, message_broker, "Messaging", "TCP")
Rel_L(prometheus, reverse_proxy, "Scrapes metrics at /metrics", "HTTP")
Rel_D(prometheus, item_socket_1, "Scrapes metrics at /metrics", "HTTP")
Rel_D(prometheus, item_socket_2, "Scrapes metrics at /metrics", "HTTP")
Rel_D(prometheus, cadvisor, "Scrapes metrics at /metrics", "HTTP")
Rel_D(item_socket_1, postgres, "Retrieves data from and writes data to.", "TCP")
Rel_D(item_socket_2, postgres, "Retrieves data from and writes data to.", "TCP")
@enduml
